#include "validate.h"

enum ValidationCodes validateInput(AppContext* context, Params* params) {
    enum ValidationCodes result = CORRECT;

    switch (context->oldNumSys) {
    case NIL:
        result = EMPTY_START_SYS;
        break;
    case BIN:
        result = validateBin(params);
        break;
    case OCT:
        result = validateOct(params);
        break;
    case DEC:
        result = validateDec(params);
        break;
    }

    if (!context->newNumSys && result != EMPTY_START_SYS)
        result = EMPTY_END_SYS;

    return result;
}

enum ValidationCodes validateBin(Params* params) {
    enum ValidationCodes code = CORRECT;
    int delta = 0;
    const char* tmp = params->value;
<<<<<<< HEAD
=======

>>>>>>> 594f7232ab2289564aab726f573727a61fd4f23e
    while (tmp[delta] != '\0') {
        if (tmp[delta] < ZERO || tmp[delta] > ONE) {
            code = INCORRECT_INPUT;
            break;
        }
        if (delta > BIN_LEN) {
            code = MAX_LEN_EXCEEDED;
        }
        delta++;
    }
    return code;
}

enum ValidationCodes validateOct(Params* params) {
    enum ValidationCodes code = CORRECT;
    int delta = 0;
    const char* tmp = params->value;
<<<<<<< HEAD
=======

>>>>>>> 594f7232ab2289564aab726f573727a61fd4f23e
    while (tmp[delta] != '\0') {
        if (tmp[delta] < ZERO || tmp[delta] > SEVEN) {
            code = INCORRECT_INPUT;
            break;
        }
        if (delta > OCT_LEN) {
            code = MAX_LEN_EXCEEDED;
        }
        delta++;
    }
    return code;
}

enum ValidationCodes validateDec(Params* params){
    enum ValidationCodes code = CORRECT;
    int delta = 0;
    const char* tmp = params->value;
<<<<<<< HEAD
=======

>>>>>>> 594f7232ab2289564aab726f573727a61fd4f23e
    while (tmp[delta] != '\0') {
        if ((tmp[delta] < ZERO || tmp[delta] > NINE) && tmp[delta] != MINUS) {
            code = INCORRECT_INPUT;
            break;
        }
        if (delta > DEC_LEN) {
            code = MAX_LEN_EXCEEDED;
        }
        delta++;
    }
    return code;
}
